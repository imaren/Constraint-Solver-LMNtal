
eq(add(mul(1,!X1,!E2,!H1),mul(2,!X2,!E2,!H1)),n(1,!E2),!H1).
% leq(add(mul_leq(3,!X1,!E1,!H1),mul_leq(3,!X2,!E1,!H1)),n_leq(0,!E1),!H1).
% leq(add(mul(2,!X1,!E2,!H1),mul(5,!X2,!E2,!H1)),n(10,!E2),!H1).
ans = or(!H1,unsat).

%smmetric mod
symmetric_mod1@@ Ret = symod(N,M):- A = N mod M, 2*A < M | Ret = A.
symmetric_mod2@@ Ret = symod(N,M):- A = (N mod M) - M,  | Ret = A.

%add
add@@ Ret = add(N,M) :- A = N+M | Ret = A.

%前準備：標準形に直す（未実装）現時点では標準形で入力されることを想定している．
% 標準形：DNF(Disjuncive Normal Form, 論理積の論理和)

%omega test

%%変数が1つの等式があったら決定できる(いらないかもしれない)
decide1@@ eq(mul_n(N,!X,!E,!H),n(N2,!E),!H) :- N2 mod N =\= 0 | eq_r(mul_r(N,!X,!E,!H),n(N2,!E),!H), unsat(!H). 
decide2@@ eq(mul_n(N,!X,!E,!H),n(N2,!E),!H) :- N2 mod N =:= 0 | eq_r(mul_r(N,!X,!E,!H),n(N2,!E),!H), sat(!H). 

ready_norm@@ ready(!E,!H) \ Ret = mul_p(N,!X,!E,!H) :- Ret = mul(N,!X,!E,!H).
lready_norm@@ ready(!E,!H) \ Ret = mul_leq_p(N,!X,!E,!H) :- Ret = mul_leq(N,!X,!E,!H).
ready_fin@@ ready(!E,!H) :- .

%gcd for normalization
gcd0@@ Ret = mul(N,!X,!E,!H):- N >= 0| Ret = mul_n(N,!X,!E,!H), gcd(N,!E,!H).
gcd00@@ Ret = mul(N,!X,!E,!H):- N < 0, M = -N| Ret = mul_n(N,!X,!E,!H), gcd(M,!E,!H).
lgcd0@@ Ret = mul_leq(N,!X,!E,!H):- N >= 0| Ret = mul_leq_n(N,!X,!E,!H), gcd(N,!E,!H).
lgcd00@@ Ret = mul_leq(N,!X,!E,!H):- M = -N| Ret = mul_leq_n(N,!X,!E,!H), gcd(M,!E,!H).
gcd1@@ gcd(0,!E,!H) :- .
gcd2@@ gcd(N,!E,!H) \ gcd(M,!E,!H) :- N =< M, G = M-N | gcd(G,!E,!H).
gcd3@@ gcd(1,!E,!H) :- .
%% normalization using gcd of identifiers 
%% omega test の入力の右辺は整数定数のはずなので，等式，不等式ごとに n(N,!E) が1つ繋がってるはず
%% n と n_leq に分ける理由　→
%% 等式と不等式で処理が違うから（分けなくても左辺の情報を増やせばできるが、mul の方はわける以外に思いついていないので n もわけておく）
norm_eq_unsat@@ eq(C,n(N,!E),!H), gcd(G,!E,!H) :- ground(C), N mod G =\= 0 | unsat(!H).
norm1@@ gcd(G,!E,!H) \ Ret = mul_n(N,!X,!E,!H):- A = N / G, uniq(G,!X,!E) | Ret = mul_n(A,!X,!E,!H).
norm2@@ Ret = n(N,!E), gcd(G,!E,!H) :- A = N / G | Ret = n(A,!E).
lnorm1@@ gcd(G,!E,!H) \ Ret = mul_leq_n(N,!X,!E,!H):- A = N / G, uniq(G,!X,!E) | Ret = mul_leq_n(A,!X,!E,!H).
lnorm2@@ Ret = n_leq(N,!E), gcd(G,!E,!H) :- A = N / G, N*G >= 0 | Ret = n_leq(A,!E).
lnorm3@@ Ret = n_leq(N,!E), gcd(G,!E,!H) :- A = N / G - 1 | Ret = n_leq(A,!E).

%% omega test の最後のステップが終わったら，係数の絶対値が1となるような変数があるかどうかをチェックするために mul_tmp を mul_n に変換する
loop_omega@@ fin_omega(!H) \ Ret = mul_tmp(N,!R,!E,!H) :- Ret = mul_n(N,!R,!E,!H).
loop_omega2@@ fin_omega(!H) :- . 

%% 係数が1となるような変数があったら変形して置き換える．
%% x_n = b - (x_1,...,x_n-1) <- n = j, |a_j|=1 のとき
%%% 式を消しちゃうバージョン eliminate0
% eliminate0@@ eliminate(S,!X1,!E,!H) \  Ret = mul_n(N,!X2,!E,!H) :- A = -N * S | Ret = del, emul(A,!X2,!E,!H).
%%% 式を消さないバージョン eliminate0
eliminate0@@ eliminate(S,!X1,L,!E,!H) \ replace(A,B,L), Ret = mul_n(N,!X2,!E,!H) :- M = -N * S | Ret = mul_r(N,!X2,!E,!H), emul(A,!X2,!E,!H).
eliminate2@@ eliminate(S,!X1,!E1,!H), Ret = mul_n(N1,!X1,!E2,!H), emul(N2,!X2,!E1,!H) \ eq(L,n(N4,!E2),!H)
    :- !E1 \= !E2, !X1 \= !X2, A = N1 * N2, uniq(!X1,!X2,!E2,H) 
    | eq(add(mul_n(A,!X2,!E2,!H),L),n(N4,!E2),!H).
%% 右辺 bのやつ
eliminate3@@ eliminate(S,!X1,!E1,!H), Ret = mul_n(N1,!X1,!E2,!H), eq(C1,n(N2,!E1),!H) \ eq(C2,n(N3,!E2),!H)
    :- !E1 \= !E2, A = (N3 - N1 * N2) * S, uniq(!X1,!E2,!H) 
    | eq(C2,n(A,!E2),!H).
%% 変数を削除する
%% 1回でも正規化に成功していたらトークンを作る．
eliminate_fin_right@@ eliminate(S,!X1,!E1,!H) \ Ret = add(C,mul_n(N,!X1,!E2,!H)) :- int(N) | Ret = C, token(!E2,!H) .
eliminate_fin_left@@ eliminate(S,!X1,!E1,!H) \ Ret = add(mul_n(N,!X1,!E2,!H),C) :- int(N) | Ret = C, token(!E2,!H) .

%% 不等式
leliminate_2@@ eliminate(S,!X1,!E1,!H), Ret = mul_leq_n(N1,!X1,!E2,!H), emul(N2,!X2,!E1,!H) \ leq(L,n_leq(N4,!E2),!H)
    :- !E1 \= !E2, !X1 \= !X2, A = N1 * N2, uniq(!X1,!X2,!E2,H) 
    | leq(add(mul_leq_n(A,!X2,!E2,!H),L),n_leq(N4,!E2),!H).
%% 右辺 bのやつ
leliminate_3@@ eliminate(S,!X1,!E1,!H), Ret = mul_leq_n(N1,!X1,!E2,!H), eq(C1,n(N2,!E1),!H) \ leq(C2,n_leq(N3,!E2),!H)
    :- !E1 \= !E2, A = (N3 - N1 * N2) * S, uniq(!X1,!E2,!H) 
    | leq(C2,n_leq(A,!E2),!H).
%% 変数を削除する
%% 1回でも正規化に成功していたらトークンを作る．
leliminate_fin_right@@ eliminate(S,!X1,!E1,!H) \ Ret = add(C,mul_leq_n(N,!X1,!E2,!H)) :- int(N) | Ret = C, token(!E2,!H) .
leliminate_fin_left@@ eliminate(S,!X1,!E1,!H) \ Ret = add(mul_leq_n(N,!X1,!E2,!H),C) :- int(N) | Ret = C, token(!E2,!H) .

%% 同じ変数が2つ出てきたらまとめる
ljoin@@ Ret = mul_leq_n(N1,!X,!E,!H), Ret2 = add(mul_leq_n(N2,!X,!E,!H),C) 
            :- A = N1 + N2 | Ret = mul_leq_p(A,!X,!E,!H), Ret2 = C.
%%
lprep_norm@@ token(!E,!H) \ Ret = mul_leq_n(N,!X,!E,!H) :- Ret = mul_leq_p(N,!X,!E,!H).
lprep_fin@@ token(!E,!H) :- ready(!E,!H).

%%係数 |a_j|=1 を見つける
%%% 式を保存しておくバージョン
find_coef_1@@ Ret = mul_n(1,!X,!E,!H) :- uniq(!E) |Ret = mul_r(1,!X,!E,!H), eliminate(1,!X,replace(0,0),!E,!H).
find_coef_neg1@@ Ret = mul_n(-1,!X,!E,!H) :- uniq(!E) |Ret = mul_r(-1,!X,!E,!H), eliminate(-1,!X,replace(0,0),!E,!H).
/* 
*   or があったら
*   R = mul_n(N,!X,!E,!H) :- uniq(!E), N =:= 1 | Ret = mul_r(N,!X,!E,!H), eliminate(N,!X,replace,!E,!H).
                          :- uniq(!E), N =:= -1 | Ret = mul_r(N,!X,!E,!H), eliminate(N,!X,replace,!E,!H).
*
*/

%% 係数の絶対値が 1 のものが無かったら、次のステップ
%% このとき、制約は mul_n が残っているはず
%% mul_n を 全部見て、一番小さい係数を持つ変数 x_n を決める
% \item 全ての mul_n アトムを(別の名前を付けて)複製する．この時，uniq は使えない（この手順は繰り返し行う可能性がある）ので mul_n は何か違う名前に変えておく
% \item 複製したアトム2つにマッチして係数が小さい方を消す．（最終的に係数が一番小さい項だけ残る）
% \item $m = a_n + 1$ を表すアトムを生成する．(2番で残ったアトムを書き換える)
% \item 何か違う名前になってる mul_n と $m=a_n+1$を表すアトムを使って全部置き換える（この時さらに違う名前にする．mul_n に戻すとまだ危ないカモ？）

%係数が 0 の mul が出てくるかもしれないので削除する このルールをどこまで下に追いやれるかは後に考える mul_tmpとかいう名前も後で 
elim_zero1@@ Ret = add(C,mul_tmp(N,!X1,!E2,!H)) :- N =:= 0 | Ret = C.
elim_zero2@@ Ret = add(mul_tmp(N,!X1,!E2,!H),C) :- N =:= 0 | Ret = C.

%% 左辺 x_n 以外 等式内に該当する変数が無いと代入できないことに注意
omega4@@ m(M,!X,!R,!E,!H), Ret2 = mul_o(T,!X,!E2,!H) \ Ret = mul_o(N,!X2,!E2,!H) :- int(T),!X \= !X2, A = (2*N+M)/(2*M), M*N >= 0 | Ret = mul_tmp(add(A,symod(N,M)),!X2,!E2,!H).
omega4_1@@ m(M,!X,!R,!E,!H), Ret2 = mul_o(T,!X,!E2,!H) \ Ret = mul_o(N,!X2,!E2,!H) :- int(T), !X \= !X2, A = (2*N+M)/(2*M)-1, M*N < 0 | Ret = mul_tmp(add(A,symod(N,M)),!X2,!E2,!H).
%% 右辺 
omega4_2@@  m(M,!X,!R,!E,!H), Ret = mul_o(T,!X,!E2,!H) \ eq(C,n(N,!E2),!H) :-  A = (2*N+M)/(2*M), M*N >= 0, uniq(!R,!E2) | eq(C,n(add(A,symod(N,M)),!E2),!H).
omega4_3@@  m(M,!X,!R,!E,!H), Ret = mul_o(T,!X,!E2,!H) \ eq(C,n(N,!E2),!H) :-  A = (2*N+M)/(2*M)-1, M*N < 0, uniq(!R,!E2) | eq(C,n(add(A,symod(N,M)),!E2),!H).
%% 左辺 x_n 左辺の x_n は最後
omega4_4@@ m(M,!X,!R,!E,!H) \ Ret = mul_o(N,!X,!E2,!H) :- int(M), A = -N | Ret = mul_tmp(A,!R,!E2,!H).
omega2@@ min(N,!X,!E,!H) \ min(M,!X2,!E2,!H) :-N>=0, M>=0, N =< M |.
omega2_2@@ min(N,!X,!E,!H) \ min(M,!X2,!E2,!H) :-N<0, M<0, N >= M |.
omega2_3@@ min(N,!X,!E,!H) \ min(M,!X2,!E2,!H) :-N>=0, M<0, N + M < 0 |.
omega2_4@@ min(M,!X,!E,!H) \ min(N,!X2,!E2,!H) :-N>=0, M<0, N + M > 0 |.
omega1@@ Ret = mul_n(N,!X,!E,!H) :- int(N) | Ret = mul_o(N,!X,!E,!H), min(N,!X,!E,!H).
omega3@@ min(N,!X,!E,!H) :- A = N+1 | m(A,!X,!R,!E,!H).

omega_fin@@ m(M,!X,!R,!E,!H) :- int(M) | fin_omega(!H).

%% 等式が終わったら，不等式を処理する


%% 変数の削除や正規化は等式の処理と一緒に上の方でやっている．上限と下限のチェック
%% 上限と下限が両方ある変数を抽出．
bounded2@@ bounded(!X,!H) \ Ret = mul_leq_n(N,!X,!E,!H):- Ret = mul_leq_b(N,!X,!E,!H). 
bounded1@@ Ret = mul_leq_n(N,!X,!E1,!H), Ret2 = mul_leq_n(M,!X,!E2,!H) \ :- N*M < 0 | bounded(!X,!H).
%% 上限と下限のいずれかしか存在しない変数を含む制約は削除
unbounded2@@ Ret = mul_leq_r(M,!X,!E,!H) \ Ret2 = mul_leq_b(N,!X,!E,!H) :- Ret2 = mul_leq_r(N,!X,!E,!H).
unbounded3@@ Ret = mul_leq_r(M,!X,!E,!H) \ Ret2 = mul_leq_n(N,!X,!E,!H) :- Ret2 = mul_leq_r(N,!X,!E,!H).
unbounded1@@ leq(C,n_leq(N,!E),!H), Ret = mul_leq_n(M,!X,!E,!H) :- leq_r(C,n_leq(N,!E),!H), Ret = mul_leq_r(M,!X,!E,!H).

%% 変数が１つなら解く
%% 逆に，変数が２つ以上あるかどうかを判定して，あったらトークンを生成→下の shadow を実行する
check@@ Ret = mul_leq_n(N,!X,!E1,!H), Ret2 = mul_leq_n(M,!Y,!E2,!H) \:- !X =\= !Y, uniq(!H) | do_rs(!H).


%% real shadow 
%%% decision procedures に書いてない解釈：上限と下限の関係を持つ2つの式から変数 X を削除する．
%%% この時、同じ式同士の削除は行わないが、同じ式を2回使うことはある．
%%% 変数 X が 2つあったら、X を消すことを決意．係数も持っておく（後で使うから）．
%%% real shadow は再帰的に全ての変数についてチェックする
%%% 変数が1種類になるまでガンバって減らす
real1@@ Ret2 = mul_leq_n(M,!X,!E2,!H) \ Ret = mul_leq_n(N,!X,!E1,!H), r_shadow(!X,!H) 
    :- N * M < 0, !E1 =\= !E2, uniq(!X,!H)  | Ret = mul_leq_n(N,!X,!E1,!H),r_elim(N,!X,!E1,!H).
%%% 消す変数がある式から、残りの項を抽出．
real2@@ r_elim(!X,!E,!H) \  Ret = mul_leq_n(N,!X2,!E,!H) :- int(N) | Ret = mul_leq_r(N,!X,!E,!H), r_remaining(N,!X2,!E,!H).
%%% X の係数が正なら Upper bound, 負なら Lower bound が存在するとして処理する
%%% Upper bound 
real3@@ r_elim(!X,!E,!H), Ret = mul_leq_n(N,!X,!E2,!H) \ :- !E =\= !E2 | .
%%% Lower bound

%% dark shadow

%% gray shadow

%% shadow で消す変数を1つ適当に選ぶ．（disjunction 毎に1つ）
eliminate_var@@ Ret = mul_leq_n(N,!X,!E,!H), Ret2 = mul_leq_n(M,!Y,!E2,!H) \ :- uniq(!X,!H) | r_shadow(!X,!H).

%%整形
del@@ Ret = add(del,del):- Ret = del.

%or
or1@@ Ret = or(!X,C), unsat(!X) :- Ret = or(unsat,C).
or2@@ Ret = or(C,!X), unsat(!X) :- Ret = or(C,unsat).
or6@@ Ret = or(!X,C), sat(!X) :- Ret = or(sat,C).
or7@@ Ret = or(C,!X), sat(!X) :- Ret = or(C,sat).
or3@@ Ret = or(unsat,unsat):- Ret = unsat.
or4@@ Ret = or(sat,C) :- ground(C) | Ret = sat.
or5@@ Ret = or(C,sat) :- ground(C) | Ret = sat.

%neq
neq(!X,!Y,!H) :- !X = !Y | unsat(!H).

% one variable has 2 or more integer
n(N,!X,!H), n(M,!X,!H) :- N =\= M | unsat(!H).

% two variable has same integer
n(N,!X) \ n(M,!Y) :- N =:= M | !X >< !Y.

%equality
hh_eq@@ eq(!X,!Y,!H) :- !X >< !Y.
hi_eq@@ eq(!X,N,!H) :- int(N) | n(N,!X,!H).
ih_eq@@ eq(N,!X,!H) :- int(N) | n(N,!X,!H).

%sat
%全ての伝播が終わって，unsat でなければ sat
Ret = or(!X,C) :- ground(C) | Ret = sat.
Ret = or(C,!X) :- ground(C) | Ret = sat.






