% leq(!A:"a",!B:"b"), leq(!B,!A), leq(!D,!D), leq(!B,!C:"c").

% ans(add(!A:"a",!B:"b")).

%--------------------------------------------------------------------------------------------------------------------
%example formula
% yamamoto sann no yatu　イコールとプラスだけ
%--------------------------------------------------------------------------------------------------------------------
%% x1 = x5 /\ x1 + 1 = x6 /\ x4 = x3 /\ x5 = x4 /\ x4 = 0 /\ x3 = 0 /\ x1 = x0 /\ x1 + 1 = x2 /\ x0 = 0
% name("x0",!H0),name("x1",!H1), name("x2",!H2), name("x3",!H3),name("x4",!H4), name("x5",!H5), name("x6",!H6).
% eq(!H1,!H5),eq(add(!H1,1),!H6),eq(!H4,!H3),eq(!H5,H4),eq(!H4,0),eq(!H3,0),eq(!H1,!H0),eq(add(!H1,1),!H2),eq(!H0,0).
%% => x2 = x6
% q(eq(name("x2",!H2),name("x6",!H6))).
%--------------------------------------------------------------------------------------------------------------------

%--------------------------------------------------------------------------------------------------------------------
%eample formula2
% イコールとプラスだけだけど、具体的な数字が決定できない
%--------------------------------------------------------------------------------------------------------------------
%% x1 + 1 = x2 /\ x3 + 1 = x4 /\ x1 = x3
% name("x1",!H1), name("x2",!H2), name("x3",!H3),name("x4",!H4).
eq(add(!H1,1),!H2),eq(add(!H3,1),!H4), eq(!H1,!H3).
%% => x2 = x4 
q(eq(!H6,!H7)).
%--------------------------------------------------------------------------------------------------------------------

%--------------------------------------------------------------------------------------------------------------------
%example formula3
% 3つ以上の足し算をどうする？？ →　2項の足し算に置き換えて考える？？？
%--------------------------------------------------------------------------------------------------------------------
%% x1 + x2 = x3 /\ x4 + x2 + x5 = x6 /\ x1 = x4 + x5　 
%% -> 置き換え
%% x1 + x2 = x3 /\ x4 + x2 = r1 /\ r1 + x5 = x6 /\ x1 = x4 + x5　 
% name("x1",!H1), name("x2",!H2), name("x3",!H3),name("x4",!H4), name("x5",!H5), name("x6",!H6),name("r1",!R1).
% eq(add(!H1,!H2),!H3), eq(add(!H4,!H2),!R1),eq(add(!R1,!H5),!H6), eq(!H1, add(!H4,!H5)).
% %% => x3 = x6
% q(eq(!H3,!H6)).
%--------------------------------------------------------------------------------------------------------------------

%--------------------------------------------------------------------------------------------------------------------
%example formula4
% これくらいならでる
%--------------------------------------------------------------------------------------------------------------------
%% x1 + x2 = x3 /\ x4 + x2 = r1 /\ r1 + x5 = r2 /\ x6 + r2 = x7 /\ r3 = x4 + x5 /\ x1 = r3 + x6　 
% name("x1",!H1), name("x2",!H2), name("x3",!H3),name("x4",!H4), name("x5",!H5), name("x6",!H6),name("r1",!R1).
% eq(add(!H1,!H2),!H3), eq(add(!H4,!H2),!R1),eq(add(!R1,!H5),!R2), eq(add(!H6,!R2),!H7), eq(!R3, add(!H4,!H5)), eq(!H1,add(!R3,!H6)).
% %% => x3 = x7
% q(eq(!H3,!H7)).
%--------------------------------------------------------------------------------------------------------------------

%--------------------------------------------------------------------------------------------------------------------
%example formula5
% 前件が成り立たない 数値が導けるパターンなら書けるようになった
%--------------------------------------------------------------------------------------------------------------------
%% x1 = x2 /\ x1 = 1 /\ x2 = 0
% name("x1",!H1), name("x2",!H2), name("x3",!H3),name("x4",!H4).
% eq(!H1,!H2), eq(!H1,1),eq(!H2,0).
%% => x3 = x4
% q(eq(!H3,!H4)).
%--------------------------------------------------------------------------------------------------------------------


%less than or equall, Constraint Handling Rule, p.89 and p.193
leq_duplicate@@ leq(!X,!Y), leq(!X,!Y) :- leq(!X,!Y).
leq_reflexivity@@ leq(!X,!X):- .
leq_antisymmetry@@ leq(!X,!Y), leq(!Y,!X) :- eq(!X,!Y).
leq_transitivity@@ leq(!X,!Y), leq(!Y,!Z)\ :-uniq(!X,!Y,!Z) | leq(!X,!Z).

% less_duplicate@@ less(!X,!Y) \ less(!X,!Y) :- true.
% less_reflexivity@@ less(!X,!X):- false.
% less_antisymmetry@@ less(!X,!Y), less(!Y,!X) :- false.
% less_transitivity@@ less(!X,!Y), less(!Y,!Z)\ :-uniq(!X,!Y,!Z) | less(!X,!Z).

% one variable has 2 or more integer
n(N,!X), n(M,!X) :- N =\= M | antecedent(false).

% two variable has same integer
n(N,!X) \ n(M,!Y) :- N =:= M | !X >< !Y.

%integer addition.
hh_add@@ L = add(!X,!Y), n(N,!X), n(M,!Y) :- A = N + M|L = A.
hi_add@@ L = add(!X, N), n(M,!X) :- A = N + M | L = A.
ih_add@@ L = add(N, !X), n(M,!X) :- A = N + M | L = A.
ii_add@@ L = add(N, M) :- A = N + M | L = A.

%equality
%% integer
hh_eq@@ eq(!X,!Y) :- !X >< !Y.
hi_eq@@ eq(!X,N) :- int(N) | n(N, !X).
ih_eq@@ eq(N,!X) :- int(N) | n(N, !X).

%% formula
%%% L = A => A = L 
eq_symmetry@@ eq(L,!A) \:- uniq(L,A) | eq(!A,L).


eq1@@ eq(!A, add(!X,N)), eq(!B, add(!X,M)) :- N =:= M | !A >< !B.
eq2@@ eq(!A, add(!X,N)), eq(!B, add(M,!X)) :- N =:= M | !A >< !B.
eq3@@ eq(!A, add(N,!X)), eq(!B, add(M,!X)) :- N =:= M | !A >< !B.
eq4@@ eq(!A, add(!X,!Y)), eq(!B, add(!X,!Y)) :- !A >< !B.
eq5@@ eq(!A, add(!X,!Y)), eq(!B, add(!Y,!X)) :- !A >< !B.

%%% 足し算の順番を変える
%%% 同じ意味のものを上のルールで削除するので、これを上に持っていくと動かないことがある?
%%% e.g. eq(add(!H1,!H2),!H3),eq(!R3, add(!H4,!H5)), eq(!H1,add(!R3,!H6)).
eq(!TMP, add(!A,!B)), eq(!ANS, add(!TMP,!C)) \ 
:-  uniq(!A,!B,!C)
|   eq(!TMP2, add(!B,!C)), eq(!ANS, add(!TMP2,!A)), 
    eq(!TMP3, add(!A,!C)), eq(!ANS, add(!TMP3,!B)).


% question
q(true) :- true.
q(false) :- false.

% and
L = and(false, C) :- ground(C) | L = false.
L = and(C, false) :- ground(C) | L = false.
L = and(true, true) :- L = true.

L = eq(name(S,!X), name(S2, !Y)) :- string(S), string(S2), !X = !Y | L = true.
L = eq(!X,!Y) :- !X = !Y | L = true.

%antecedent is false
true@@ q(C), antecedent(false) :- ground(C) | q(true).

% failure
fail@@ q(C) :- ground(C) | q(false).
